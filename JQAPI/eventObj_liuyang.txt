jquery：event.currentTarget：在事件冒泡阶段中的当前DOM元素

		$("p").click(function(event) {
		    	alert( event.currentTarget === this ); // true  
		});  


jquery：event.data：属性用于返回绑定当前事件处理函数时传递的附加数据
		// 附加数据可以为任意类型
		var userObj = { name: "CodePlayer", age: 18 };

		// 为所有p元素绑定click事件，并传入附加数据(user)
		$("p").on( "click", userObj, function(event){
		    alert( event.data.name ); // CodePlayer
		} );

jquery：event.delegateTarget：属性用于返回负责绑定当前被调用的事件处理函数的DOM元素
	
		// 为id为element的元素中的所有span元素绑定click事件
		$("#element").on( "click", "span", function(event){
		    // event.delegateTarget 就是id为element的DOM元素
		    // this 就是当前触发事件的span元素
		    alert( event.delegateTarget === this); // false 
		} );


		// 为id为element的元素中的所有span元素绑定click事件
		$("#element span").bind( "click", function(event){
		    // event.delegateTarget 就是当前触发事件的span元素
		    // this 就是当前触发事件的span元素
		    alert( event.delegateTarget === this ); // true
		} );

jquery：isDefaultPrevented()：用于判断是否已经调用过event.preventDefault()函数

		$("a").click(function(event){
			    alert( event.isDefaultPrevented() ); // false
			    event.preventDefault();
			    alert( event.isDefaultPrevented() ); // true
		  });  

jquery：isImmediatePropagationStopped()：用于判断是否已经调用过event.stopImmediatePropagation()函数

		 <script>
			 function immediatePropStopped(e) {
				  var msg = "";
				  if ( e.isImmediatePropagationStopped() ) {
				    msg =  "called";
				  } else {
				    msg = "not called";
				  }
				  $("#stop-log").append( "<div>" + msg + "</div>" );
				 }
				  $("button").click(function(event) {
				  immediatePropStopped(event);
				  event.stopImmediatePropagation();
				  immediatePropStopped(event);
			});	
		</script>

jquery：isPropagationStopped()：用于判断是否已经调用过event.stopPropagation()函数。event.stopPropagation()用于阻止当前事件在DOM树上冒泡

		// 为所有div元素绑定click事件
		$("div").click( function(event){
		    	alert("div-click");
		} );

		//为所有p元素绑定click事件
		$("p").click( function(event){
		    	alert("p-click");
		} );

		//为所有input:button元素绑定click事件
		$(":button").click( function(event){
			    alert( event.isPropagationStopped() ); // false
			    event.stopPropagation(); // 阻止事件冒泡到DOM树上，不会触发p和div的click
			    alert( event.isPropagationStopped() ); // true
		} );

jquery：event.namespace

jquery：pageX：属性用于返回鼠标指针相对于当前文档左边缘的位置
	  pageY：属性用于返回鼠标指针相对于当前文档上边缘的位置

		  // 显示鼠标指针在文档中的当前坐标位置
		  $(document).bind("mousemove", function(event){
		      	$("#message").text('当前鼠标坐标:(' + event.pageX + ', ' + event.pageY + ')');
		  });

jquery：preventDefault()：用于阻止当前触发事件的默认行为

		$("a").click( function(event){
		    if( !confirm("你确定要删除?") ){
			        event.preventDefault();  // 阻止链接默认的URL跳转行为
			        // return false; // 函数的返回值为false，也可以起到阻止默认行为的效果
		    }   
		} );


		$("form").submit( function(event){
		    if( !$("#username").val() ){
			        alert("username is required!");
			        event.preventDefault(); // 阻止默认的表单提交行为
			        // return false; // 函数的返回值为false，也可以起到阻止默认行为的效果
		    }   
		} );

jquery：relatedTarget属性的返回值是不确定的，这取决于触发事件的具体行为

	如果鼠标从a1向右移动到<span>元素(上，则返回该<span>元素(n3)；
	如果鼠标从a1向下移动到<div>元素上，则返回该div元素(n1)；
	如果鼠标从a1向左移动到<p>元素上，则返回该<p>元素(n2)。

	对于a2而言，它可以返回html、body或div等元素的其中之一。

	<div id="n1" style="height: 100px; border: 1px solid #000;" >
	    <p id="n2">段落文本<a id="a1" href="http://www.365mini.com">CodePlayer</a><span id="n3">专注于编程开发技术分享</span>  </p>
	</div>
	<a id="a2" href="http://www.365mini.com">CodePlayer</a>
	<div id="message"></div>


	<script type="text/javascript">
	$("a").bind("mouseout", function(event) {
	    $("#message").text(event.relatedTarget ? event.relatedTarget.tagName : "null" );
	} );
	</script>

jquery：result属性：用于返回本次事件触发执行的上一个事件处理函数的返回值
	$("#myForm").submit( function(event) {
		    // 验证文本框uid的输入是否有效
		    if( !$("#uid").val() ){
		        alert("uid不能为空!");
		        return false;
		    }
		    return true;    
	} );

	$("#myForm").submit( function(event) {
	    // 如果前面的表单验证返回false，无法继续验证，直接返回false
	    if( event.result === false){
	        return false;
	    }
	    
	    // 验证文本框mail的输入是否有效
	    if( !$("#mail").val() ){
	        alert("mail不能为空!");
	        return false;
	    }
	    return true;
	} );

jquery：target属性：返回值是Element类型，返回最初触发事件的DOM元素
		
		<div id="n1" style="height: 100px; background: #eee;" >
			    <br>
			    <p id="n2" style="background: #999;" >段落文本...段落文本...<br>
			        <span id="n3" style="background: #fff;" >专注于编程开发技术分享</span>
			    </p>
		</div>

		$("div").click( function(event) {
		    alert("最初触发事件的是:" + event.target.tagName + "#" + event.target.id);  
		} );

		// 点击span元素区域，弹出："最初触发事件的是:SPAN#n3"
		// 点击p元素自身区域，弹出："最初触发事件的是:P#n2"
		// 点击div元素自身区域，弹出："最初触发事件的是:DIV#n1"

jquery：timeStamp属性用于返回当前事件触发的时间值。
	 该时间值是以与1970年1月1日午夜之间相差的毫秒数来表示的。
	 可以使用Date()构造函数将其转为Date对象。

	 $("div").click( function(event) {
		     var datetime = new Date( event.timeStamp ).toLocaleString();
		     var html = '你于[' + datetime + "]点击了该元素";
		     html += '<br>( event.timeStamp = ' + event.timeStamp + ' )';
		     $(this).html( html );
	 } );

	 注：在火狐浏览器中，由于浏览器自身的bug问题，该属性无法正确返回触发事件的时间值。

jquery：type属性：用于返回当前触发事件的事件类型

	// 为n1绑定mouseenter和mouseleave事件
	// 鼠标移入时，边框变为蓝色；鼠标移出时，边框变为原来的颜色(#999)
	$("#n1").bind("mouseenter mouseleave", function(event){
	    if(event.type == "mouseenter"){
	        	$(this).css("borderColor", "blue");
	    }else{
	        	$(this).css("borderColor", "#999");
	    }
	});

jquery：which属性：用于返回触发当前事件时按下的键盘按键或鼠标按钮

		// 为当前文档绑定keydown和mousedown两种事件
		// 检测鼠标按下了那些键
		// 检测键盘按下了那些字母按键
		$(document).bind("keydown mousedown", function(event){
		    var msg = '';
		    if( event.type == "mousedown" ){ // 鼠标按下事件
			        var map = {"1": "左", "2":"中", "3":"右"};
			        msg = '你按下了鼠标[' + map[event.which] + ']键';
		    }else{ // 键盘按下事件
		        if(event.which >= 65 && event.which <= 90){
		            	msg = '你按下了键盘[' + String.fromCharCode(event.which) + ']键';
		        }
		    }
		    if(msg){
		        	$("#msg").prepend( msg + '<br>');
		    }
		});

		//鼠标
		1	鼠标左键
		2	鼠标中键(滚轮键)
		3	鼠标右键

		//键盘
		48 - 57	对应字符 0 - 9
		65 - 90	对应字符 A - Z
		97 - 122	对应字符 a - z

		8	Backspace键
		9	Tab键
		13	Enter键
		16	Shift键
		17	Ctrl键
		20	Alt键
		20	Caps Lock键(大小写锁定)
		27	Esc键
		33 - 36	对应按键 PageUp、PageDown、End、Home
		37 - 40	对应按键 左、上、右、下(方向键)
		45 - 46	对应按键 Insert、Delete
		48 - 57	对应按键 0 - 9(非小键盘)
		65 - 90	对应按键 A - Z
		91	Windows键
		96 - 105	对应按键 0 - 9(小键盘)
		106、107、109、110、111	对应按键*、+、-、.、/(小键盘)
		112 - 123	对应按键 F1 - F12
